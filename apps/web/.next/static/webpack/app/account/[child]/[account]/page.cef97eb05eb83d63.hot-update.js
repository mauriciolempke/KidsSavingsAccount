"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/account/[child]/[account]/page",{

/***/ "(app-pages-browser)/./src/services/AccountService.ts":
/*!****************************************!*\
  !*** ./src/services/AccountService.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountService: function() { return /* binding */ AccountService; }\n/* harmony export */ });\n/* harmony import */ var _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../persistence/Repositories */ \"(app-pages-browser)/./src/persistence/Repositories.ts\");\n/* harmony import */ var _domain_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../domain/validation */ \"(app-pages-browser)/./src/domain/validation.ts\");\n/* harmony import */ var _domain_calc_BalanceCalculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../domain/calc/BalanceCalculator */ \"(app-pages-browser)/./src/domain/calc/BalanceCalculator.ts\");\n/**\r\n * Account Service\r\n * \r\n * Handles account-related operations:\r\n * - Create/delete accounts\r\n * - Goal achievement\r\n * - Read-only rules for achieved goals\r\n * - Account validation\r\n */ \n\n\n// ============================================================================\n// Account Service\n// ============================================================================\nclass AccountService {\n    /**\r\n   * Creates a new account for a child.\r\n   */ static async createAccount(childName, accountData) {\n        var _accountData_allowance, _accountData_interest;\n        (0,_domain_validation__WEBPACK_IMPORTED_MODULE_1__.validateName)(accountData.name, \"Account name\");\n        // Validate goal data if provided\n        if (accountData.type === \"Goal\") {\n            if (!accountData.goal) {\n                throw new Error(\"Goal account must have goal configuration\");\n            }\n            (0,_domain_validation__WEBPACK_IMPORTED_MODULE_1__.validateName)(accountData.goal.name, \"Goal name\");\n            (0,_domain_validation__WEBPACK_IMPORTED_MODULE_1__.validatePositiveAmount)(accountData.goal.cost, \"Goal cost\");\n        }\n        // Validate allowance\n        if ((_accountData_allowance = accountData.allowance) === null || _accountData_allowance === void 0 ? void 0 : _accountData_allowance.enabled) {\n            if (!accountData.allowance.amount || !accountData.allowance.frequency) {\n                throw new Error(\"Allowance requires amount and frequency\");\n            }\n            (0,_domain_validation__WEBPACK_IMPORTED_MODULE_1__.validatePositiveAmount)(accountData.allowance.amount, \"Allowance amount\");\n        }\n        // Validate interest\n        if ((_accountData_interest = accountData.interest) === null || _accountData_interest === void 0 ? void 0 : _accountData_interest.enabled) {\n            if (!accountData.interest.type || accountData.interest.value === undefined || !accountData.interest.frequency) {\n                throw new Error(\"Interest requires type, value, and frequency\");\n            }\n            (0,_domain_validation__WEBPACK_IMPORTED_MODULE_1__.validatePositiveAmount)(accountData.interest.value, \"Interest value\");\n        }\n        // Create account entity\n        const account = {\n            name: accountData.name,\n            type: accountData.type,\n            allowance: accountData.allowance || {\n                enabled: false\n            },\n            interest: accountData.interest || {\n                enabled: false\n            },\n            goal: accountData.goal,\n            ledger: [],\n            createdAt: Date.now()\n        };\n        // Save account\n        return await _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__.AccountRepository.create(childName, account);\n    }\n    /**\r\n   * Gets an account.\r\n   */ static async getAccount(childName, accountName) {\n        return await _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__.AccountRepository.get(childName, accountName);\n    }\n    /**\r\n   * Gets all accounts for a child.\r\n   */ static async getAllAccounts(childName) {\n        return await _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__.AccountRepository.getAllForChild(childName);\n    }\n    /**\r\n   * Deletes an account.\r\n   * Checks if account is a goal that's achieved - requires confirmation.\r\n   */ static async deleteAccount(childName, accountName) {\n        let confirmIfAchieved = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        var _account_goal;\n        const account = await this.getAccount(childName, accountName);\n        if ((account === null || account === void 0 ? void 0 : (_account_goal = account.goal) === null || _account_goal === void 0 ? void 0 : _account_goal.achieved) && !confirmIfAchieved) {\n            throw new Error(\"Cannot delete achieved goal without confirmation\");\n        }\n        await _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__.AccountRepository.delete(childName, accountName);\n    }\n    /**\r\n   * Gets the current balance of an account.\r\n   */ static async getAccountBalance(childName, accountName) {\n        const account = await this.getAccount(childName, accountName);\n        if (!account) {\n            throw new Error(\"Account not found\");\n        }\n        return (0,_domain_calc_BalanceCalculator__WEBPACK_IMPORTED_MODULE_2__.calculateAccountBalance)(account);\n    }\n    /**\r\n   * Checks if an account is read-only (achieved goal).\r\n   */ static async isReadOnly(childName, accountName) {\n        var _account_goal;\n        const account = await this.getAccount(childName, accountName);\n        return (account === null || account === void 0 ? void 0 : (_account_goal = account.goal) === null || _account_goal === void 0 ? void 0 : _account_goal.achieved) || false;\n    }\n    /**\r\n   * Marks a goal as achieved.\r\n   * Makes the account read-only.\r\n   */ static async markGoalAchieved(childName, accountName) {\n        const account = await this.getAccount(childName, accountName);\n        if (!account) {\n            throw new Error(\"Account not found\");\n        }\n        if (account.type !== \"Goal\") {\n            throw new Error(\"Only Goal accounts can be marked as achieved\");\n        }\n        if (!account.goal) {\n            throw new Error(\"Account does not have goal configuration\");\n        }\n        if (account.goal.achieved) {\n            throw new Error(\"Goal is already achieved\");\n        }\n        // Check if goal is actually achieved (balance >= cost)\n        const balance = (0,_domain_calc_BalanceCalculator__WEBPACK_IMPORTED_MODULE_2__.calculateAccountBalance)(account);\n        if (balance < account.goal.cost) {\n            throw new Error(\"Goal not yet achieved. Current: $\".concat(balance, \", Target: $\").concat(account.goal.cost));\n        }\n        // Mark as achieved\n        account.goal.achieved = true;\n        await _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__.AccountRepository.save(childName, account);\n    }\n    /**\r\n   * Checks if a goal should be auto-marked as achieved.\r\n   * Returns true if balance >= cost and goal is not yet marked achieved.\r\n   */ static async shouldAutoMarkAchieved(childName, accountName) {\n        const account = await this.getAccount(childName, accountName);\n        if (!account || account.type !== \"Goal\" || !account.goal) {\n            return false;\n        }\n        if (account.goal.achieved) {\n            return false;\n        }\n        return (0,_domain_calc_BalanceCalculator__WEBPACK_IMPORTED_MODULE_2__.isGoalAchieved)(account);\n    }\n    /**\r\n   * Gets account summary information.\r\n   */ static async getAccountSummary(childName, accountName) {\n        var _account_goal;\n        const account = await this.getAccount(childName, accountName);\n        if (!account) {\n            throw new Error(\"Account not found\");\n        }\n        const balance = (0,_domain_calc_BalanceCalculator__WEBPACK_IMPORTED_MODULE_2__.calculateAccountBalance)(account);\n        const isReadOnly = ((_account_goal = account.goal) === null || _account_goal === void 0 ? void 0 : _account_goal.achieved) || false;\n        const transactionCount = account.ledger.length;\n        const summary = {\n            name: account.name,\n            type: account.type,\n            balance,\n            isReadOnly,\n            transactionCount,\n            hasAllowance: account.allowance.enabled,\n            hasInterest: account.interest.enabled\n        };\n        if (account.goal) {\n            summary.goal = {\n                name: account.goal.name,\n                cost: account.goal.cost,\n                achieved: account.goal.achieved,\n                progress: Math.min(100, balance / account.goal.cost * 100)\n            };\n        }\n        return summary;\n    }\n    /**\r\n   * Checks if an account exists.\r\n   */ static async accountExists(childName, accountName) {\n        return await _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__.AccountRepository.exists(childName, accountName);\n    }\n    /**\r\n   * Updates an account configuration (allowance, interest).\r\n   * Cannot update if account is read-only (achieved goal).\r\n   */ static async updateConfiguration(childName, accountName, updates) {\n        var _account_goal;\n        const account = await this.getAccount(childName, accountName);\n        if (!account) {\n            throw new Error(\"Account not found\");\n        }\n        if ((_account_goal = account.goal) === null || _account_goal === void 0 ? void 0 : _account_goal.achieved) {\n            throw new Error(\"Cannot update achieved goal account\");\n        }\n        if (updates.allowance !== undefined) {\n            account.allowance = updates.allowance;\n        }\n        if (updates.interest !== undefined) {\n            account.interest = updates.interest;\n        }\n        await _persistence_Repositories__WEBPACK_IMPORTED_MODULE_0__.AccountRepository.save(childName, account);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/AccountService.ts\n"));

/***/ })

});